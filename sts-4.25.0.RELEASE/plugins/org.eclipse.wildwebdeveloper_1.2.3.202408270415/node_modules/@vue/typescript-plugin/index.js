"use strict";
const createLanguageServicePlugin_1 = require("@volar/typescript/lib/quickstart/createLanguageServicePlugin");
const vue = require("@vue/language-core");
const common_1 = require("./lib/common");
const server_1 = require("./lib/server");
const windowsPathReg = /\\/g;
const plugin = (0, createLanguageServicePlugin_1.createLanguageServicePlugin)((ts, info) => {
    const vueOptions = getVueCompilerOptions();
    const languagePlugin = vue.createVueLanguagePlugin(ts, id => id, () => info.languageServiceHost.getProjectVersion?.() ?? '', info.project.projectKind === ts.server.ProjectKind.Inferred
        ? () => true
        : fileName => {
            const fileMap = new vue.FileMap(info.languageServiceHost.useCaseSensitiveFileNames?.() ?? false);
            for (const vueFileName of createLanguageServicePlugin_1.externalFiles.get(info.project) ?? []) {
                fileMap.set(vueFileName, undefined);
            }
            return fileMap.has(fileName);
        }, info.languageServiceHost.getCompilationSettings(), vueOptions);
    return {
        languagePlugins: [languagePlugin],
        setup: language => {
            server_1.projects.set(info.project, { info, language, vueOptions });
            (0, common_1.decorateLanguageServiceForVue)(language, info.languageService, vueOptions, ts, true, fileName => fileName);
            (0, server_1.startNamedPipeServer)(ts, info.project.projectKind, info.project.getCurrentDirectory());
            // #3963
            const timer = setInterval(() => {
                if (info.project['program']) {
                    clearInterval(timer);
                    info.project['program'].__vue__ = { language };
                }
            }, 50);
        }
    };
    function getVueCompilerOptions() {
        if (info.project.projectKind === ts.server.ProjectKind.Configured) {
            const tsconfig = info.project.getProjectName();
            return vue.createParsedCommandLine(ts, ts.sys, tsconfig.replace(windowsPathReg, '/')).vueOptions;
        }
        else {
            return vue.createParsedCommandLineByJson(ts, ts.sys, info.languageServiceHost.getCurrentDirectory(), {}).vueOptions;
        }
    }
});
module.exports = plugin;
//# sourceMappingURL=index.js.map